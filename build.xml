<project xmlns:ivy="antlib:org.apache.ivy.ant" name="markdownBlog" default="build" basedir=".">
  <description>
      A blog powered by markdown2
  </description>
  <property file="build.properties"/>

  <target name="resolve"
          description="Resolve ivy">
    <ivy:retrieve conf="source"/>
    <ivy:retrieve conf="lib"
                  pattern="lib/[module]/[artifact].[ext]" />
    <unzip src="lib/${epiceditor}.zip"
           dest="lib"/>
  </target>

  <target name="run-minify-js">
    <echo message="compressing: ${in}"/>
    <exec executable="uglifyjs" failonerror="true">
      <arg value="-nm"/>
      <arg value="--overwrite"/>
      <arg value="${in}"/>
    </exec>
  </target>

  <target name="jshint">
    <echo message="jshint: ${in}"/>
    <exec executable="jshint" output="jshint.out" append="true" failonerror="true">
      <arg value="${in}"/>
    </exec>
  </target>

  <target name="run-jshint">
    <property name="src.js" location="${blogapp}/static/js"/>
    <delete file="jshint.out"/>
    <antcall target="jshint">
      <param name="in" value="${blogapp}/admin/static/admin.js"/>
    </antcall>
    <antcall target="jshint">
      <param name="in" value="${blogapp}/admin/static/ng.js"/>
    </antcall>
    <antcall target="jshint">
      <param name="in" value="${src.js}/blog.js"/>
    </antcall>
    <antcall target="jshint">
      <param name="in" value="${src.js}/ng.js"/>
    </antcall>
    <antcall target="jshint">
      <param name="in" value="${utilapp}/ng.js"/>
    </antcall>
  </target>

  <target name="init" depends="run-jshint">
    <!-- create the time stamp -->
    <tstamp/>
    <!-- get markdown2 package directory -->
    <exec executable="python" outputproperty="markdown2">
      <arg value="-c"/>
      <arg value="import markdown2; print markdown2.__file__[0:-1]"/>
    </exec>
  </target>

  <target name="build-libs">
    <subant target="">
      <fileset file="build.libs.xml"/>
    </subant>
  </target>

  <target name="build" depends="init, build-libs"
          description="generate the distribution" >
    <!-- create the distribution directory -->
    <mkdir dir="${build}"/>

    <!-- copy src -->
    <copy todir="${build}">
      <fileset dir="${main}"/>
    </copy>

    <copy todir="${build}/test">
      <fileset dir="${test}"/>
    </copy>

    <!-- copy lib -->
    <copy todir="${build}/app/bloglib">
      <fileset dir="lib/bloglib"/>
    </copy>
    <copy file="lib/${lesscss}" tofile="${build.blog.js}/less.js"/>
    <copy todir="${build.blog.static}" force="true">
      <fileset dir="lib/${epiceditor}"/>
    </copy>
    <copy file="${markdown2}" todir="${build}"/>
    <copy file="lib/werkzeug.zip" todir="${build}"/>
    <copy file="lib/flask.zip" todir="${build}"/>
  </target>

  <target name="dist" depends="build"
          description="generate the distribution" >
    <!-- create the distribution directory -->
    <mkdir dir="${dist}"/>

    <!-- copy src -->
    <copy todir="${dist}">
      <fileset dir="${build}/">
        <exclude name="**/test/"/>
      </fileset>
    </copy>

    <!-- copy/move lib -->
    <move file="${dist.blog.static}/epiceditor/js/epiceditor.min.js"
          tofile="${dist.blog.static}/epiceditor/js/epiceditor.js" force="true"/>

    <antcall target="minify-js"/>
  </target>

  <target name="minify-js">
    <!-- compress js files for blog -->
    <antcall target="run-minify-js">
      <param name="in" value="${dist}/app/blog/admin/static/admin.js"/>
    </antcall>

    <antcall target="run-minify-js">
      <param name="in" value="${dist}/app/blog/admin/static/ng.js"/>
    </antcall>

    <antcall target="run-minify-js">
      <param name="in" value="${dist.blog.js}/blog.js"/>
    </antcall>

    <antcall target="run-minify-js">

      <param name="in" value="${dist.blog.js}/ng.js"/>
    </antcall>

    <!-- compress js files for util -->
    <antcall target="run-minify-js">
      <param name="in" value="${dist}/app/myutils/ng.js"/>
    </antcall>
  </target>

  <target name="test" depends="build"
          description="unit test">
    <!-- Execute the unittest -->
    <exec executable="python" dir="${build}\test\serverside">
      <arg value="testmycommentapi.py"/>
      <arg value="${gaesdk}"/>
    </exec>

    <exec executable="python" dir="${build}\test\serverside">
      <arg value="testmyblogapi.py"/>
      <arg value="${gaesdk}"/>
    </exec>
  </target>

  <target name="clean"
          description="clean up">
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
    <delete dir="lib"/>
  </target>

  <target name="cleanivy"
          description="clean ivy cache">
    <ivy:cleancache />
  </target>
</project>
